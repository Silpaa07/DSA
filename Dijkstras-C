#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define V 6 // Number of vertices

// Find the vertex with minimum distance value
int minDistance(int dist[], bool sptSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (!sptSet[v] && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

// Print the final distances
void printSolution(int dist[]) {
    printf("Vertex \tDistance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t%d\n", i, dist[i]);
}

// Dijkstraâ€™s shortest path algorithm
void dijkstra(int graph[V][V], int src) {
    int dist[V];     // Output array: dist[i] holds the shortest distance from src to i
    bool sptSet[V];  // sptSet[i] will be true if vertex i is included in shortest path tree

    // Initialize distances as infinite and sptSet[] as false
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }

    dist[src] = 0; // Distance from source to itself is 0

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum distance vertex
        int u = minDistance(dist, sptSet);
        sptSet[u] = true;

        // Update dist[v] if there's a shorter path through u
        for (int v = 0; v < V; v++)
            if (!sptSet[v] && graph[u][v] &&
                dist[u] != INT_MAX &&
                dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    printSolution(dist);
}

// Driver code
int main() {
    int graph[V][V] = {
        {0, 4, 0, 0, 0, 10},
        {4, 0, 8, 0, 0, 0},
        {0, 8, 0, 7, 0, 4},
        {0, 0, 7, 0, 9, 14},
        {0, 0, 0, 9, 0, 2},
        {10, 0, 4, 14, 2, 0}
    };

    int source = 0;
    dijkstra(graph, source);

    return 0;
}
